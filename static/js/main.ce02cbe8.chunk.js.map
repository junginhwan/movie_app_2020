{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","components/Navigation.js","routes/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","to","pathname","src","alt","map","genre","index","key","slice","Home","state","isLoading","movies","getMovies","a","async","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","props","Navigation","Detail","description","large_image","rating","like_count","match","params","description_full","large_cover_image","like","getMovie","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce02cbe8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <Link\r\n        to={{\r\n          pathname: `/movie/${id}`,\r\n        }}\r\n      >\r\n        <img src={poster} alt={title}></img>\r\n      </Link>\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">\r\n          <Link\r\n            to={{\r\n              pathname: `/movie/${id}`,\r\n            }}\r\n          >\r\n            {title}\r\n          </Link>\r\n        </h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"movie__genres\">\r\n          {genres.map((genre, index) => (\r\n            <li className=\"genres__genre\" key={index}>\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from '../components/Movie';\r\nimport './Home.css';\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    movies: [],\r\n  };\r\n\r\n  getMovies = async () => {\r\n    const {\r\n      data: {\r\n        data: { movies },\r\n      },\r\n    } = await axios.get(\r\n      'https://yts-proxy.now.sh/list_movies.json?sort_by=rating',\r\n    );\r\n    this.setState({ movies, isLoading: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMovies();\r\n  }\r\n  render() {\r\n    const { isLoading, movies } = this.state;\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader__text\">Loading...</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"movies\">\r\n            {movies.map(movie => {\r\n              return (\r\n                <Movie\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  genres={movie.genres}\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.medium_cover_image}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './About.css';\r\n\r\nfunction About(props) {\r\n  return (\r\n    <div className=\"about__container\">\r\n      <p>\r\n        “리액트로 처음 만든 영화 사이트” <br />\r\n        비록 따라한 수준이지만, 어느 정도 익숙해 졌다.\r\n        <br />\r\n        thanks nomadcoders\r\n      </p>\r\n      <p>− 정인환, 2020. 1. 12</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\nfunction Navigation() {\r\n  return (\r\n    <div className=\"nav\">\r\n      <Link to=\"/\">home</Link>\r\n      <Link to=\"/about\">about</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport './Detail.css';\r\n\r\nclass Detail extends React.Component {\r\n  state = {\r\n    title: '',\r\n    description: '',\r\n    large_image: '',\r\n    rating: 0,\r\n    like_count: 0,\r\n    isLoading: true,\r\n  };\r\n\r\n  async getMovie() {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n    } = this.props;\r\n    if (id) {\r\n      const {\r\n        data: {\r\n          data: { movie },\r\n        },\r\n      } = await axios.get(\r\n        `https://yts.lt/api/v2/movie_details.json?movie_id=${id}`,\r\n      );\r\n      this.setState({\r\n        title: movie.title,\r\n        description: movie.description_full,\r\n        large_image: movie.large_cover_image,\r\n        rating: movie.rating,\r\n        like: movie.like_count,\r\n        isLoading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMovie();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"detail__container\">\r\n        {this.state.isLoading ? 'Loading...' : ''}\r\n        <div>\r\n          <img src={this.state.large_image} alt={this.state.title}></img>\r\n        </div>\r\n        <div className=\"detail__textarea\">\r\n          <h3>{this.state.title}</h3>\r\n          <ul>\r\n            <li>\r\n              {this.state.rating > 0 ? `rating : ${this.state.rating}` : null}\r\n            </li>\r\n            <li>{this.state.like > 0 ? `like : ${this.state.like}` : null}</li>\r\n          </ul>\r\n          <p>{this.state.description}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Detail;\r\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Home from './routes/Home';\nimport About from './routes/About';\nimport Navigation from './components/Navigation';\nimport Detail from './routes/Detail';\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}